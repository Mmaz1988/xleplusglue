ADJADV ENGLISH LEXICON (1.0)

"degree"

successful ADJ-S XLE { @(PRED %stem)
		       (^ ATYPE) =c attributive
		      |
		       (^PRED) = '%stem<(^SUBJ)>'
		       (^ ATYPE) =c predicative
		     }
		     (^SEMTYPE) = degree.

fast 	  ADJ-S XLE { @(PRED %stem)
		      (^ ATYPE) =c attributive
		     |
		      (^PRED) = '%stem<(^SUBJ)>'
		      (^ ATYPE) =c predicative
		    }
		    (^SEMTYPE) = degree.

clever 	  ADJ-S XLE { @(PRED %stem)
		      (^ ATYPE) =c attributive
		     |
		      (^PRED) = '%stem<(^SUBJ)>'
		      (^ ATYPE) =c predicative
		    }
		    (^SEMTYPE) = degree.

big 	  ADJ-S XLE { @(PRED %stem)
		      (^ ATYPE) =c attributive
		     |
		      (^PRED) = '%stem<(^SUBJ)>'
		      (^ ATYPE) =c predicative
		    }
		    (^SEMTYPE) = degree.

small 	  ADJ-S XLE { @(PRED %stem)
		      (^ ATYPE) =c attributive
		     |
		      (^PRED) = '%stem<(^SUBJ)>'
		      (^ ATYPE) =c predicative
		    }
		    (^SEMTYPE) = degree.

large 	  ADJ-S XLE { @(PRED %stem)
		      (^ ATYPE) =c attributive
		     |
		      (^PRED) = '%stem<(^SUBJ)>'
		      (^ ATYPE) =c predicative
		    }
		    (^SEMTYPE) = degree.

fat 	  ADJ-S XLE { @(PRED %stem)
		      (^ ATYPE) =c attributive
		     |
		      (^PRED) = '%stem<(^SUBJ)>'
		      (^ ATYPE) =c predicative
		    }
		    (^SEMTYPE) = degree.

important 	  ADJ-S XLE { @(PRED %stem)
		      (^ ATYPE) =c attributive
		     |
		      (^PRED) = '%stem<(^SUBJ)>'
		      (^ ATYPE) =c predicative
		    }
		    (^SEMTYPE) = degree.

more` important 	  ADJ-S XLE { @(PRED %stem)
		      (^ ATYPE) =c attributive
		     |
		      (^PRED) = '%stem<(^SUBJ)>'
		      (^ ATYPE) =c predicative
		    }
		    (^SEMTYPE) = degree.

"intersectives"

black 	  ADJ-S XLE { @(PRED %stem)
		      (^ ATYPE) =c attributive
		     |
		      (^PRED) = '%stem<(^SUBJ)>'
		      (^ ATYPE) =c predicative
		    }
		    (^SEMTYPE) = intersective.

interesting    A * { @(PRED %stem)
		      (^ ATYPE) =c attributive
		     |
		      (^PRED) = '%stem<(^SUBJ)>'
		      (^ ATYPE) =c predicative
		    }
		    (^SEMTYPE) = intersective.

four`-legged    A * { @(PRED %stem)
		      (^ ATYPE) =c attributive
		     |
		      (^PRED) = '%stem<(^SUBJ)>'
		      (^ ATYPE) =c predicative
		    }
		    (^SEMTYPE) = intersective.

genuine   A * { @(PRED %stem)
          		(^ ATYPE) =c attributive
          	|
          		 (^PRED) = '%stem<(^SUBJ)>'
          		 (^ ATYPE) =c predicative
          		    }
             (^SEMTYPE) = intersective.
"countries"

British   A * @(PRED british); ETC.

German      A * @(PRED german); ETC.

Italian     A * @(PRED italian); ETC.

Irish       A * @(PRED irish); ETC.

Canadian     A * @(PRED canadian); ETC.

Portuguese      A * @(PRED portuguese); ETC.

North` American     A * @(PRED north` american); ETC.


"adverbs "

quickly   ADV * (^ PRED) = 'quick<>(^OBL-COMP)'.

quicker   ADV * (^ DEGREE) = comparative
                (^ PRED)='quick<>(^OBL-COMP)'.

very 	  ADV * @(PRED very).

freely 	  ADV * @(PRED free).

twice 	  ADV * @(PRED twice).

"old?
scottish  A * @(PRED scottish)
	      :$ lam(Q,lam(X,merge(drs([],[pred(%stem,X)]),app(Q,X)))) :
	      ((s::(ADJUNCT $ ^)_e -o s::(ADJUNCT $ ^)_t) -o (s::(ADJUNCT $ ^)_e -o s::(ADJUNCT $ ^)_t)) || noscope.
trustworthy A * @(PRED trustworthy)
		:$ lam(Q,lam(X,merge(drs([],[pred(%stem,X)]),app(Q,X)))) :
		((s::(ADJUNCT $ ^)_e -o s::(ADJUNCT $ ^)_t) -o (s::(ADJUNCT $ ^)_e -o s::(ADJUNCT $ ^)_t)) || noscope.
alleged   A * @(PRED alleged)
	      :$ lam(Q,lam(X,merge(drs([],[pred(%stem,X)]),app(Q,X)))) :
	      ((s::(ADJUNCT $ ^)_e -o s::(ADJUNCT $ ^)_t) -o (s::(ADJUNCT $ ^)_e -o s::(ADJUNCT $ ^)_t)) || noscope.

genuine   A * (^DEGREE) = positive
	      @(PRED genuine)
	      (^ATYPE) = attributive.

leading	  A * (^DEGREE) = positive
	      @(PRED leading)
	      (^ATYPE) = attributive.
Leading	  A * (^DEGREE) = positive
	      @(PRED leading)
	      (^ATYPE) = attributive.
former 	  A * (^DEGREE) = positive
	      @(PRED former)
	      (^ATYPE) = attributive.
	      :$ lam(Q,lam(X,merge(drs([],[pred(%stem,X)]),app(Q,X)))) :
	      ((s::(ADJUNCT $ ^)_e -o s::(ADJUNCT $ ^)_t) -o (s::(ADJUNCT $ ^)_e -o s::(ADJUNCT $ ^)_t)) || noscope.
"
----