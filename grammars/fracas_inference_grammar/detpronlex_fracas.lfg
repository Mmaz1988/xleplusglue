DETPRON ENGLISH LEXICON (1.0)


"pronouns (not complete)"

I 	  PRON * @(PRON I 1 sg pers)
		 @(CASE nom).

You	PRON * {@(PRON you 2 sg pers)
	       |@(PRON you 2 pl pers)}.

you	PRON * {@(PRON you 2 sg pers)
	       |@(PRON you 2 pl pers)}.

He 	  PRON * @(PRON he 3 sg pers)
		 @(CASE nom).

he 	  PRON * @(PRON he 3 sg pers)
		 @(CASE nom).

She 	  PRON * @(PRON she 3 sg pers)
		 @(CASE nom).

she 	  PRON * @(PRON she 3 sg pers)
		 @(CASE nom).

it	  PRON * @(PRON it 3 sg pers).

We 	  PRON * @(PRON we 1 pl pers)
		 @(CASE nom).

we 	  PRON * @(PRON we 1 pl pers)
		 @(CASE nom).

They 	  PRON * @(PRON they 3 pl pers)
		 @(CASE nom).

they 	  PRON * @(PRON they 3 pl pers)
		 @(CASE nom).

My 	  PRON * @(POSS-PRON I sg 1).   "'I' or 'my' ??"

my 	  PRON * @(POSS-PRON I sg 1).

his 	  PRON * @(POSS-PRON he sg 3).

Her 	  PRON * {@(PRON she sg 3 pers)
		    |@(POSS-PRON she sg 3)}.

her 	  PRON * @(PRON her 3 sg pers).

Him 	  PRON * @(PRON he 3 sg pers)
		 @(CASE acc).

him 	  PRON * @(PRON he 3 sg pers)
		 @(CASE acc).



"expletive"
There   PRON *   (^PRON-TYPE) = expl_
	             (^PRON-FORM) = it
	             "(^PERS) = 3 (^NUM) = sg"  "standard analysis, but some"
	             "{(^NUM) =sg |(^NUM) = pl}"
	             "(^NUM)"
	             "inherit features from subject??".

"relative"
who PRON *      (^PRON-TYPE) = rel
                (^PRON-FORM) = who
                (^PRED) = 'PRO'
                {(^NUM) =sg |(^NUM) = pl}.


"determiners"

the 	  D *
          @(SPEC-DET-PRED the)
          (^DEF) = +        "encoded as det-type in inness"
	      @(QUANT-SCOPE ^ %q)
	      @(LLCLOSURE %mc56)
@(LLATOM %mc48 s::^ e)
@(LLATOM %mc49 s::^ t)
@(LLIMP %mc50 %mc48 %mc49)
@(LLATOM %mc51 s::^ e)
@(LLATOM %mc52 %q t)
@(LLIMP %mc53 %mc51 %mc52)
@(LLATOM %mc54 %q t)
@(LLIMP %mc55 %mc53 %mc54)
@(LLIMP %mc56 %mc50 %mc55)
@(CONCAT lam `( P `, lam `( Q `, merge `( drs `(  `[ X `]  `,  `[  `]  `)  `, merge `( app `( P `, X `)  `, app `( Q `, X `)  `)  `)  `)  `)  %mc57)
@(GLUE-MEANING %mc56 %mc57)
@(NOSCOPE %mc56).

The 	  D *
          @(SPEC-DET-PRED the)
          (^DEF) = +
	      @(QUANT-SCOPE ^ %q)
	      @(LLCLOSURE %mc56)
@(LLATOM %mc48 s::^ e)
@(LLATOM %mc49 s::^ t)
@(LLIMP %mc50 %mc48 %mc49)
@(LLATOM %mc51 s::^ e)
@(LLATOM %mc52 %q t)
@(LLIMP %mc53 %mc51 %mc52)
@(LLATOM %mc54 %q t)
@(LLIMP %mc55 %mc53 %mc54)
@(LLIMP %mc56 %mc50 %mc55)
@(CONCAT lam `( P `, lam `( Q `, merge `( drs `(  `[ X `]  `,  `[  `]  `)  `, merge `( app `( P `, X `)  `, app `( Q `, X `)  `)  `)  `)  `)  %mc57)
@(GLUE-MEANING %mc56 %mc57)
@(NOSCOPE %mc56).


a 	  D * @(SPEC-DET-PRED a)
	      (^ DEF) = - "this indefinite only marks singulars"
	      (^ NUM) = sg
	      @(QUANT-SCOPE ^ %q)
	      @(LLCLOSURE %mc76)
@(LLATOM %mc68 s::^ e)
@(LLATOM %mc69 s::^ t)
@(LLIMP %mc70 %mc68 %mc69)
@(LLATOM %mc71 s::^ e)
@(LLATOM %mc72 %q t)
@(LLIMP %mc73 %mc71 %mc72)
@(LLATOM %mc74 %q t)
@(LLIMP %mc75 %mc73 %mc74)
@(LLIMP %mc76 %mc70 %mc75)
@(CONCAT lam `( P `, lam `( Q `, merge `( drs `(  `[ X `]  `,  `[  `]  `)  `, merge `( app `( P `, X `)  `, app `( Q `, X `)  `)  `)  `)  `)  %mc77)
@(GLUE-MEANING %mc76 %mc77).


an 	  D * @(SPEC-DET-PRED a)
	      (^ DEF) = - "this indefinite only marks singulars"
	      (^ NUM) = sg
	      @(QUANT-SCOPE ^ %q)
	      @(LLCLOSURE %mc76)
@(LLATOM %mc68 s::^ e)
@(LLATOM %mc69 s::^ t)
@(LLIMP %mc70 %mc68 %mc69)
@(LLATOM %mc71 s::^ e)
@(LLATOM %mc72 %q t)
@(LLIMP %mc73 %mc71 %mc72)
@(LLATOM %mc74 %q t)
@(LLIMP %mc75 %mc73 %mc74)
@(LLIMP %mc76 %mc70 %mc75)
@(CONCAT lam `( P `, lam `( Q `, merge `( drs `(  `[ X `]  `,  `[  `]  `)  `, merge `( app `( P `, X `)  `, app `( Q `, X `)  `)  `)  `)  `)  %mc77)
@(GLUE-MEANING %mc76 %mc77).

A 	  D * @(SPEC-DET-PRED a)
	      (^ DEF) = - "this indefinite only marks singulars"
	      (^ NUM) = sg
	      @(QUANT-SCOPE ^ %q)
	      @(LLCLOSURE %mc76)
@(LLATOM %mc68 s::^ e)
@(LLATOM %mc69 s::^ t)
@(LLIMP %mc70 %mc68 %mc69)
@(LLATOM %mc71 s::^ e)
@(LLATOM %mc72 %q t)
@(LLIMP %mc73 %mc71 %mc72)
@(LLATOM %mc74 %q t)
@(LLIMP %mc75 %mc73 %mc74)
@(LLIMP %mc76 %mc70 %mc75)
@(CONCAT lam `( P `, lam `( Q `, merge `( drs `(  `[ X `]  `,  `[  `]  `)  `, merge `( app `( P `, X `)  `, app `( Q `, X `)  `)  `)  `)  `)  %mc77)
@(GLUE-MEANING %mc76 %mc77).

An 	  D * @(SPEC-DET-PRED a)
	      (^ DEF) = - "this indefinite only marks singulars"
	      (^ NUM) = sg
	      @(QUANT-SCOPE ^ %q)
	      @(LLCLOSURE %mc76)
@(LLATOM %mc68 s::^ e)
@(LLATOM %mc69 s::^ t)
@(LLIMP %mc70 %mc68 %mc69)
@(LLATOM %mc71 s::^ e)
@(LLATOM %mc72 %q t)
@(LLIMP %mc73 %mc71 %mc72)
@(LLATOM %mc74 %q t)
@(LLIMP %mc75 %mc73 %mc74)
@(LLIMP %mc76 %mc70 %mc75)
@(CONCAT lam `( P `, lam `( Q `, merge `( drs `(  `[ X `]  `,  `[  `]  `)  `, merge `( app `( P `, X `)  `, app `( Q `, X `)  `)  `)  `)  `)  %mc77)
@(GLUE-MEANING %mc76 %mc77).



more 	  DComp * (^DEF) = - "this indefinite only marks plurals"
		  (^NUM) = pl
		  (^DEGREE) = comparative. "marks the NP as comparative to allow CPComps to apply"

More 	  DComp * (^DEF) = - "this indefinite only marks plurals"
		  (^NUM) = pl
		  (^DEGREE) = comparative. "marks the NP as comparative to allow CPComps to apply"


"changed to spec-quant"
every 	  D * @(SPEC-QUANT-PRED every)
               @(SPEC-QUANT-TYPE universal)
	      (^ DEF) = - "this indefinite only marks singulars"
	      (^ NUM) = sg
	      @(QUANT-SCOPE ^ %q)
	      @(LLCLOSURE %mc116)
@(LLATOM %mc108 s::^ e)
@(LLATOM %mc109 s::^ t)
@(LLIMP %mc110 %mc108 %mc109)
@(LLATOM %mc111 s::^ e)
@(LLATOM %mc112 %q t)
@(LLIMP %mc113 %mc111 %mc112)
@(LLATOM %mc114 %q t)
@(LLIMP %mc115 %mc113 %mc114)
@(LLIMP %mc116 %mc110 %mc115)
@(CONCAT lam `( P `, lam `( Q `, drs `(  `[  `]  `,  `[ imp `( merge `( drs `(  `[ X `]  `,  `[  `]  `)  `, app `( P `, X `)  `)  `, app `( Q `, X `)  `)  `]  `)  `)  `)  %mc117)
@(GLUE-MEANING %mc116 %mc117).

Every 	   D * @(SPEC-QUANT-PRED every)
               @(SPEC-QUANT-TYPE universal)
	      (^ DEF) = - "this indefinite only marks singulars"
	      (^ NUM) = sg
 	      @(QUANT-SCOPE ^ %q)
	      @(LLCLOSURE %mc116)
@(LLATOM %mc108 s::^ e)
@(LLATOM %mc109 s::^ t)
@(LLIMP %mc110 %mc108 %mc109)
@(LLATOM %mc111 s::^ e)
@(LLATOM %mc112 %q t)
@(LLIMP %mc113 %mc111 %mc112)
@(LLATOM %mc114 %q t)
@(LLIMP %mc115 %mc113 %mc114)
@(LLIMP %mc116 %mc110 %mc115)
@(CONCAT lam `( P `, lam `( Q `, drs `(  `[  `]  `,  `[ imp `( merge `( drs `(  `[ X `]  `,  `[  `]  `)  `, app `( P `, X `)  `)  `, app `( Q `, X `)  `)  `]  `)  `)  `)  %mc117)
@(GLUE-MEANING %mc116 %mc117).


" new quantifiers"

some D * @(SPEC-QUANT-PRED some)
	      (^ DEF) = -
	      "(^ NUM) = pl" "some man and some men both work"
 	      @(QUANT-SCOPE ^ %q).

Some D * @(SPEC-QUANT-PRED some)
	      (^ DEF) = -
	      "(^ NUM) = pl"
 	      @(QUANT-SCOPE ^ %q).

"preliminary semantics for all, copied from every"
"also for Fracas Testsuite"
"EX: All mice are animals"
all 	  D * @(SPEC-QUANT-PRED all)
          @(SPEC-QUANT-TYPE universal)
	      (^ DEF) = - "this indefinite only marks singulars"
	      (^ NUM) = pl
	      @(QUANT-SCOPE ^ %q)
	      @(LLCLOSURE %mc116)
@(LLATOM %mc108 s::^ e)
@(LLATOM %mc109 s::^ t)
@(LLIMP %mc110 %mc108 %mc109)
@(LLATOM %mc111 s::^ e)
@(LLATOM %mc112 %q t)
@(LLIMP %mc113 %mc111 %mc112)
@(LLATOM %mc114 %q t)
@(LLIMP %mc115 %mc113 %mc114)
@(LLIMP %mc116 %mc110 %mc115)
@(CONCAT lam `( P `, lam `( Q `, drs `(  `[  `]  `,  `[ imp `( merge `( drs `(  `[ X `]  `,  `[  `]  `)  `, app `( P `, X `)  `)  `, app `( Q `, X `)  `)  `]  `)  `)  `)  %mc117)
@(GLUE-MEANING %mc116 %mc117).

All 	  D * @(SPEC-QUANT-PRED all)
          @(SPEC-QUANT-TYPE universal)
	      (^ DEF) = - "this indefinite only marks singulars"
	      (^ NUM) = pl
	      @(QUANT-SCOPE ^ %q)
	      @(LLCLOSURE %mc116)
@(LLATOM %mc108 s::^ e)
@(LLATOM %mc109 s::^ t)
@(LLIMP %mc110 %mc108 %mc109)
@(LLATOM %mc111 s::^ e)
@(LLATOM %mc112 %q t)
@(LLIMP %mc113 %mc111 %mc112)
@(LLATOM %mc114 %q t)
@(LLIMP %mc115 %mc113 %mc114)
@(LLIMP %mc116 %mc110 %mc115)
@(CONCAT lam `( P `, lam `( Q `, drs `(  `[  `]  `,  `[ imp `( merge `( drs `(  `[ X `]  `,  `[  `]  `)  `, app `( P `, X `)  `)  `, app `( Q `, X `)  `)  `]  `)  `)  `)  %mc117)
@(GLUE-MEANING %mc116 %mc117).


"each"
Each D *  @(SPEC-QUANT-PRED each)
          @(SPEC-QUANT-TYPE universal)
	      (^ DEF) = -
	      (^ NUM) = sg
 	      @(QUANT-SCOPE ^ %q).

each D *  @(SPEC-QUANT-PRED each)
          @(SPEC-QUANT-TYPE universal)
	      (^ DEF) = -
	      (^ NUM) = sg
 	      @(QUANT-SCOPE ^ %q).


No D * @(SPEC-QUANT-PRED no)
       @(SPEC-QUANT-TYPE negative)
       (^ DEF) = -
       @(QUANT-SCOPE ^ %q).

no D * @(SPEC-QUANT-PRED no)
       @(SPEC-QUANT-TYPE negative)
       (^ DEF) = -
       @(QUANT-SCOPE ^ %q).



----