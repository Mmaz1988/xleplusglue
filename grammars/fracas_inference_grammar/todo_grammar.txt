
"""
large 	  A * @(ADJ-POS large).

fat	  A * @(ADJ-POS fat).

fatter	  A * @(ADJ-COMP fat).

clever	  A * @(ADJ-POS clever).

cleverer  A * @(ADJ-COMP clever).

four-legged A * @(ADJ-POS four-legged).

legal 	  A * @(ADJ-POS legal).

slower 	  A * @(ADJ-COMP slow).

more` important A * @(ADJ-COMP important).

fast 	  A * @(ADJ-POS fast);
	  ADV * { (^ PRED) = 'fast<(^OBL-COMP)>'
		| @(PRED fast)}.

faster 	  A * @(ADJ-COMP fast);
	  ADV * { (^ PRED) = 'fast<(^OBL-COMP)>'
		  (^DEGREE) = comparative
		| @(PRED fast)}.
"""

"
For future reference to implement active and passive forms for xcomp verbs
believe V-S XLE @(PASS (^PRED) = '%stem<(^SUBJ)(^OBJ)(^XCOMP)>')
          @(XCOMP-OBJ-PASSIVE-ARGS %arg1 %arg2 %arg3)
		  @ATTITUDE
		  (^ XCOMP SUBJ) = %arg2
		  :$ lam(X, lam(Y,lam(P,lam(S,drs([],[pred(believe,S), rel(arg1,X,S), rel(arg2,Y,S), cont(S,app(app(P,Y),S))]))))) :
          (s::%arg1_e -o (s::%arg2_e -o ((s::(^XCOMP SUBJ)_e -o ((s::(^ XCOMP) SIT) _s -o (s::(^ XCOMP) SIT)_t)) -o ((s::^ SIT)_s -o (s::^ SIT)_t)))).
"


   "Change this to use of parameterized rules"
   VP --> (AUX: {(^PREDLINK) | (^XCOMP) | (^ PASSIVE) =c + | (^TNS-ASP PROG) =c +_ | (^TNS-ASP TENSE) = fut }) "auxiliary introduced for passive"
      (NEG: ! $ (^ ADJUNCT))
 	  (V: ^=!)
 	  "| AUX: ^=!
 	         (! VFORM) =c modal eg. can
 	         }"

 	  ({ NP: (^ OBJ)=! "direct object"
		 (! CASE)=acc |
 	     NP: (^ PREDLINK) = ! "to be + ..."
 	   })
 	  (NP: (^ OBJ2) = !)

 	  (AP[predicative]: (^ PREDLINK) = !)

 	  (ADVP: ! $ (^ ADJUNCT)) "place adverb before non-argument PPs eg. All Europeans travel freely within Europe"

	  "secondary object"
 	  PP*: { ! $ (^ ADJUNCT) "PPs can be all types of adjuncts"
		 (! PTYPE) =c sem "only semantic PPs here"
		 @(OT-MARK PPadj) "disprefer adjunct PPs"
	       | (^ OBL) = ! "or a general oblique"
	       };

      (PP: (^ PREDLINK) = !
           (! PTYPE) = nosem )  "argument for to be, eg. Mary is from Sweden"

 	  (PP: (^ OBL-TO) = ! "special obl for ditransitives"
	       "example of a constraining equation: require a value with =c"
	       (! PFORM) =c to )
 	  (PP: (^ OBL-AG) = ! "oblique agent of passive"
	       "example of a constraining equation: require a value with =c"
	       (! PFORM) =c by
	       @(OT-MARK PPpassiv))
 	  (
 	    {
 	     CP: (^ COMP) = !
 	    |
 	     VPinf: (^XCOMP) = !
		    {(! FIN) = -
		    "(! VFORM) = inf"  "including this will make infelected verbs infinitival"
		     | (^PASSIVE) =c + "if embedded verb is passive, verb remains inflected" }
		    "(s::^ TEMP-REF) = (s::(^XCOMP) EVAL)"}
 	   )

 	  (ADVP: ! $ (^ ADJUNCT)).

	  "rule for phrasal comparative"
	  "EX: He laughs greater than her."
	  "somewhat preliminary, should not be 'predicative', works for the moment though"
 	  "(AP[predicative]: ! $ (^ ADJUNCT))."

"old?
scottish  A * @(PRED scottish)
	      :$ lam(Q,lam(X,merge(drs([],[pred(%stem,X)]),app(Q,X)))) :
	      ((s::(ADJUNCT $ ^)_e -o s::(ADJUNCT $ ^)_t) -o (s::(ADJUNCT $ ^)_e -o s::(ADJUNCT $ ^)_t)) || noscope.
trustworthy A * @(PRED trustworthy)
		:$ lam(Q,lam(X,merge(drs([],[pred(%stem,X)]),app(Q,X)))) :
		((s::(ADJUNCT $ ^)_e -o s::(ADJUNCT $ ^)_t) -o (s::(ADJUNCT $ ^)_e -o s::(ADJUNCT $ ^)_t)) || noscope.
alleged   A * @(PRED alleged)
	      :$ lam(Q,lam(X,merge(drs([],[pred(%stem,X)]),app(Q,X)))) :
	      ((s::(ADJUNCT $ ^)_e -o s::(ADJUNCT $ ^)_t) -o (s::(ADJUNCT $ ^)_e -o s::(ADJUNCT $ ^)_t)) || noscope.

genuine   A * (^DEGREE) = positive
	      @(PRED genuine)
	      (^ATYPE) = attributive.

leading	  A * (^DEGREE) = positive
	      @(PRED leading)
	      (^ATYPE) = attributive.
Leading	  A * (^DEGREE) = positive
	      @(PRED leading)
	      (^ATYPE) = attributive.
former 	  A * (^DEGREE) = positive
	      @(PRED former)
	      (^ATYPE) = attributive.
	      :$ lam(Q,lam(X,merge(drs([],[pred(%stem,X)]),app(Q,X)))) :
	      ((s::(ADJUNCT $ ^)_e -o s::(ADJUNCT $ ^)_t) -o (s::(ADJUNCT $ ^)_e -o s::(ADJUNCT $ ^)_t)) || noscope.
"