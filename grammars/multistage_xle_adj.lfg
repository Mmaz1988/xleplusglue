DEMO   ENGLISH   CONFIG (1.0)
  ROOTCAT   ROOT.  "changed to ROOT from S"
  FILES common.templates.lfg  .
  LEXENTRIES   (DEMO ENGLISH) (MORPH ENGLISH).
  TEMPLATES (DEMO ENGLISH) (GLUE BASIC) (MULTISTAGE BASIC) (STANDARD COMMON).  "added common ParGram templates"
  RULES   (DEMO ENGLISH) (MORPH ENGLISH).
  MORPHOLOGY (DEMO ENGLISH).
  GOVERNABLERELATIONS    SUBJ OBJ OBJ2 COMP XCOMP OBL OBL-?+.
  SEMANTICFUNCTIONS    ADJUNCT  TOPIC FOCUS POSS STANDARD.
  NONDISTRIBUTIVES   NUM PERS COORD-FORM.
  EPSILON   e.
  OPTIMALITYORDER NOGOOD  PPadj +PPattach +sg-imp.
  GENOPTIMALITYORDER GenBadPunct NOGOOD +Punct.

----

DEMO ENGLISH MORPHOLOGY (1.0)

TOKENIZE:
P!tokenizers/basic-parse-tok.fst G!tokenizers/default-gen-tokenizer.fst

ANALYZE:
tokenizers/english.infl.patch.full.fst

----

DEMO   ENGLISH   RULES (1.0)

   ROOT --> "can have other things here as well, imperatives, etc." 
 	  { S:
	    @(EQUAL-GLUE * t::^);
 	    (PERIOD: @(OT-MARK Punct)) "prefer for generation" 
	  | Simp}. 

  Simp --> e: (^ SUBJ PRED) = 'pro'
	       (^ SUBJ PERS) = 2; 
 	  VP
 	  EXCL.  "obligatory exclamation mark"

   S --> NP: (^ SUBJ)=!
	     (! CASE)=nom
	     @(EQUAL-GLUE * t::^);
 	 VP: (^ TNS-ASP TENSE). "require that sentences have tense"

	 
   VP --> (AUX) "auxiliary introduced for passive" 
 	  V: ^=!
	     @(DOMINATES-GLUE * t::^ 1);
 	  (NP: (^ OBJ)=! "direct object"
	       (! CASE)=acc
	       @(EQUAL-GLUE * t::^))
 	  (NP: (^ OBJ2) = !
	       @(DOMINATES-GLUE * t::^ 1)) "secondary object"
 	  PP*: { ! $ (^ ADJUNCT) "PPs can be all types of adjuncts"
		 (! PTYPE) =c sem "only semantic PPs here"
		 @(OT-MARK PPadj) "disprefer adjunct PPs" 
	       | (^ OBL) = ! "or a a general oblique"
	       };
 	  (PP: (^ OBL-TO) = ! "special obl for ditransitives"
	       "example of a constraining equation: require a value with =c"
	       (! PFORM) =c to )
 	  (PP: (^ OBL-AG) = ! "oblique agent of passive" 
	       "example of a constraining equation: require a value with =c"
	       (! PFORM) =c by )
 	  ({ CP: (^ COMP) = !
	      t::(^ COMP) = t::^;
 	   | VPinf: (^XCOMP) = !
		    (^ VFORM) = inf}).  

   CP -->  C
	   S. 

   VPinf --> PARTinf VP. 


   NP --> { (D: ^=!)
 	    NP' 
	    PP*: ! $ (^ ADJUNCT)
	       (! PTYPE) =c sem 
	       @(OT-MARK PPattach)
 	  | PRON}.


   NP' --> { AP: ! $ (^ ADJUNCT)
		 @(EQUAL-GLUE * t::M*);
 	    NP': ^=!
		 @(DOMINATES-GLUE * t::M* 1);
 	   |
 	    N: ^=!
 	  }. 


  

   AP --> ADV*: ! $ (^ ADJUNCT);
 	  A
 	  (COMMA).						

   PP --> { P: ^ = ! "head of PP"
	       (! PTYPE) =c sem; "semantic type, Adjunct"
 	    NP: (^ OBJ) = !
		(! CASE) = acc
 	  | P: ^ = ! "head of PP" 
	       (! PTYPE) =c nosem; "non-semantic type, OBL"
 	    NP
 	  }. 



  METARULEMACRO(_CAT _BASECAT _RHS) = "applies to all rules in the grammar"

    { "just use the rule as stated"
      "don't do anything to it; ALWAYS include this option"

      _RHS

     |"if it is an NP or an N, pass it to the NP
      coordination rule"
      "COM{EX RULE NP: the girl and the boy}"

      e: _CAT $c { NP N };
      @(NPCOORD _CAT)

     |"if it is any other category, pass it to
      the same category coordination rule"
      "COM{EX RULE S: the girl sleeps and walks.}"
      "COM{EX RULE PP: with the girl and in the park}"

      e: _CAT ~$ { NP N };
      @(SCCOORD _CAT)

     |"allow bracketing around any category"
      "COM{EX RULE S: [the girl] sleeps.}"
      "COM{EX RULE S: boys baked [the bananas in the cake].}"

      LB: @(OT-MARK GenBadPunct); "preceding quote mark"
                                  "disprefer in generation"
      _CAT: @PUSHUP; "this pushes the quotes to the top
                      to avoid vacuous ambiguity for things like:
                      COM{EX RULES NP: [cakes])"
      RB "following quote mark"}.

"Coordination rules"

NPCOORD(_CAT) = "coordination of nominals"
   "COM{EX RULE NP: girls and boys}"
   "This differs from SCCOORD in that the conjunction provides NUM pl to
   the resulting coordinated f-structure and the person features are
   resolved for the noun phrase."

   _CAT: @IN-SET  "first nominal"
         @NP-CONJUNCT; "calls person resolution template"

   CONJnp: @PUSHUP; "conjunction"
           "PUSHUP avoids vacuous ambiguity in constructions like:
            COM{EX RULES NP: girls and boys}"

   _CAT: @IN-SET "second nominal"
         @NP-CONJUNCT.

SCCOORD(_CAT) = "coordination of non-nominals"
  "COM{EX RULES PP: with girls and with boys}"
  "COM{EX RULES S: girls sleep and boys sleep.}"
  "no features other than a COORD-FORM are provided to the coordinated
  f-structure."

   _CAT: @IN-SET; "first constituent"
   (COMMA: @(OT-MARK GenBadPunct)) "optional comma; 
                                    disprefered in generation"
                       "COM{EX RULES S: girls sleep, and boys sleep.}"

   CONJ: @PUSHUP; "conjunction"
         "PUSHUP avoids vacuous ambiguity in constructions like:
         COM{EX RULES S: boys walk and sleep.}" 

   _CAT: @IN-SET "second constituent".



----
DEMO   ENGLISH   TEMPLATES (1.0)

   NP-CONJUNCT = "provides person resolution features for nominal
	  coordination" 
	  
	  { "if either conjunct is 1st person; the whole NP is"
	    "EX: the boys and me}"
	    (! PERS)=c 1
	    (^ PERS)=1
	   |"if a conjunct is 2nd person and the NP is not
	    already 1st person, make it 2nd person"
	    (! PERS)=c 2
	    { (^ PERS)=c 1 "one conjunct was 1st person"
	      "EX: you and I}"
	     |(^ PERS)=2 } "else assign 2nd person"
	    "EX: you and the boys}"
	   |"otherwise, the NP is 3rd person"
	    "EX: the boys and her}"
	    (^ PERS)=3}.


   OT-MARK(_mark) = "assigns an OT mark, from common templates"
	  _mark $ o::*.

   PASS(FRAME) = { FRAME "no passive, just give back subcat frame"
	    (^ PASSIVE) = - "no passive"
	  | FRAME "passive"
	    (^ PASSIVE) = + "mark as such"
	    (^ PARTICIPLE) =c past "make sure to have a past participle"
	    (^ OBJ)-->(^ SUBJ) "obj goes to subj"
	    { (^ SUBJ)-->(^ OBL-AG) "either make subj obl-ag"
	    | (^ SUBJ)--> NULL "or delete"
	    }
	  }. 

   DAT-SHIFT(SCHEMATA) = { SCHEMATA
	    (^ DATIVE-SHIFT) = -
	  | SCHEMATA
	    (^ DATIVE-SHIFT) = +
	    (^ OBJ)-->(^ OBJ2)
	    (^ OBL-TO)-->(^ OBJ)}.

   DITRANS(P) = @(PASS @(DAT-SHIFT (^ PRED)='P<(^ SUBJ) (^ OBJ) (^ OBL-TO)>'))
	       @(DITRANS-PASSIVE-ARGS %arg1 %arg2 %arg3)
	  @(LLCLOSURE %mc6)
@(LLATOM %mc0 s::%arg1 e)
@(LLATOM %mc1 s::%arg2 e)
@(LLATOM %mc2 s::%arg3 e)
@(LLATOM %mc3 s::^ t)
@(LLIMP %mc4 %mc2 %mc3)
@(LLIMP %mc5 %mc1 %mc4)
@(LLIMP %mc6 %mc0 %mc5)
@(CONCAT  `[  `/ x `_ e `.  `[  `/ y `_ e `.  `[  `/ z `_ e `. P `( x `, y `, z `)  `]  `]  `]  %mc7)
@(GLUE-MEANING %mc6 %mc7).


 "transitives can passivize"

   TRANS(P) = @(PASS (^ PRED)='P<(^ SUBJ) (^ OBJ)>')
   	  @(TRANS-PASSIVE-ARGS %arg1 %arg2)
	  @(LLCLOSURE %mc12)
@(LLATOM %mc8 s::%arg1 e)
@(LLATOM %mc9 s::%arg2 e)
@(LLATOM %mc10 s::^ t)
@(LLIMP %mc11 %mc9 %mc10)
@(LLIMP %mc12 %mc8 %mc11)
@(CONCAT  `[  `/ x `_ e `.  `[  `/ y `_ e `. P `( x `, y `)  `]  `]  %mc13)
@(GLUE-MEANING %mc12 %mc13).


   TRANS-PASSIVE-ARGS(ARG1 ARG2) = { 
	    (^ PASSIVE) =c - 
	    ARG1 = (^ SUBJ)
	    ARG2 = (^ OBJ)
	   |
	    (^ PASSIVE) =c +
	    { 
	      (^OBL-AG) = ARG1 |
	      ARG1 = %empty
	      @(LLCLOSURE %mc18)
@(LLATOM %mc14 s::%empty e)
@(LLATOM %mc15 s::^ t)
@(LLIMP %mc16 %mc14 %mc15)
@(LLATOM %mc17 s::^ t)
@(LLIMP %mc18 %mc16 %mc17)
@(CONCAT  `[  `/ P `_  `< e `, t `>  `. Ex `_ e `[ P `( x `)  `]  `]  %mc19)
@(GLUE-MEANING %mc18 %mc19)	      }
	      ARG2 = (^ SUBJ)
	    }. 

   DITRANS-PASSIVE-ARGS(ARG1 ARG2 ARG3) = { 
	    (^ PASSIVE) =c - 
	    ARG1 = (^ SUBJ)
	    { 
	      (^ DATIVE-SHIFT) =c -
	      ARG2 = (^ OBJ)
	      ARG3 = (^ OBL-TO)
	     |
	      (^ DATIVE-SHIFT) =c +
	      ARG3 = (^ OBJ)
	      ARG2 = (^ OBJ2) 
	    } 
	   |
	    (^ PASSIVE) =c +
	    { 
	      (^OBL-AG) = ARG1 |
	      ARG1 = %empty
	      @(LLCLOSURE %mc18)
@(LLATOM %mc14 s::%empty e)
@(LLATOM %mc15 s::^ t)
@(LLIMP %mc16 %mc14 %mc15)
@(LLATOM %mc17 s::^ t)
@(LLIMP %mc18 %mc16 %mc17)
@(CONCAT  `[  `/ P `_  `< e `, t `>  `. Ex `_ e `[ P `( x `)  `]  `]  %mc19)
@(GLUE-MEANING %mc18 %mc19)	      }
	      { 
	      (^ DATIVE-SHIFT) =c -
	      ARG2 = (^ SUBJ)
	      ARG3 = (^ OBL-TO)  
	     |
	      (^ DATIVE-SHIFT) =c +
	      ARG2 = (^ OBJ2)
	      ARG3 = (^ SUBJ)
	    } 
	    }.
  

   INTRANS(P) = (^ PRED) = 'P<(^SUBJ)>'
	  @(LLCLOSURE %mc28)
@(LLATOM %mc26 s::(^ SUBJ) e)
@(LLATOM %mc27 s::^ t)
@(LLIMP %mc28 %mc26 %mc27)
@(CONCAT  `[  `/ x `_ e `. P `( x `)  `]  %mc29)
@(GLUE-MEANING %mc28 %mc29).

   INTRANS-OBL(P) = (^ PRED) = 'P<(^SUBJ)(^OBL)>'.
             


   OPT-TRANS(P) = { (^ PRED) = 'P<(^SUBJ)(^OBJ)>' "P is a variable"
	    @(LLCLOSURE %mc34)
@(LLATOM %mc30 s::(^SUBJ) e)
@(LLATOM %mc31 s::(^OBJ) e)
@(LLATOM %mc32 s::^ t)
@(LLIMP %mc33 %mc31 %mc32)
@(LLIMP %mc34 %mc30 %mc33)
@(CONCAT  `[  `/ x `_ e `.  `[  `/ y `_ e `. P `( x `, y `)  `]  `]  %mc35)
@(GLUE-MEANING %mc34 %mc35)	          | (^ PRED) = 'P<(^SUBJ)>'
		  @(LLCLOSURE %mc38)
@(LLATOM %mc36 s::(^ SUBJ) e)
@(LLATOM %mc37 s::^ t)
@(LLIMP %mc38 %mc36 %mc37)
@(CONCAT  `[  `/ x `_ e `. P `( x `)  `]  %mc39)
@(GLUE-MEANING %mc38 %mc39)		  }.  "this template takes one argument:  P"
	  
   TENSE(T) = (^ TENSE) = T.  "the more general case"

   CASE(C) = (^ CASE) = C.   

   MOOD(M) = (^ MOOD) = M.

   VPRES = { (^VFORM) ~= inf
	    @(TENSE pres) 
	    @(MOOD indicative)
	  | (^VFORM) = inf}. 

   VPAST = @(TENSE past) 
	  @(MOOD indicative). 

   VPROG = (^ ASPECT PROG) = +.

   PRED(P) = (^ PRED) = 'P'. 

   PASTP = (^ PARTICIPLE) = past. 

   BARE-AGR = { (^VFORM) ~= inf 
	    { (^ SUBJ NUM) = pl "either it is plural"
	    | (^ SUBJ PERS) ~= 3 "or singular and not 3rd person"
	      (^ SUBJ NUM) = sg
	      @(OT-MARK sg-imp) "prefer a singular imperative"
	    }
	  | (^VFORM) = inf}.

   S-AGR = (^ SUBJ PERS) = 3 "for verbs in -s"
	  (^ SUBJ NUM) = sg. 

"template for ntypes, called NPOS here because of clash with common templates"

   NPOS(N) = (^ NTYPE) = N. 

   PREP(P) = "template for most prepositions"
	  { (^ PRED) = 'P<(^OBJ)>' 
	    (^ PTYPE) = sem
	  | (^ PTYPE) = nosem
	    (^ PFORM) = P}.

"template for pronouns of all types" 

   PRON(P Z N T) = (^ PRED) = 'P'
	  (^ NUM) = N
	  (^ PERS) = Z
	  (^ PRON-TYPE) = T
	  (^ NTYPE) = pron. 

   DEF = (^ DEF).


----

DEMO ENGLISH LEXICON (1.0)

"took out all names and nouns because they are now handled via the morphology"

"all verbs here -- still need to convert fully to just have lemmas" 

"verbs with clausal arguments"

say 	  V-S XLE (^PRED) = '%stem<(^SUBJ)(^COMP)>'
	      @(LLCLOSURE %mc44)
@(LLATOM %mc40 s::(^ COMP) t)
@(LLATOM %mc41 s::(^ SUBJ) e)
@(LLATOM %mc42 s::^ t)
@(LLIMP %mc43 %mc41 %mc42)
@(LLIMP %mc44 %mc40 %mc43)
@(CONCAT  `[  `/ p `_ t `.  `[  `/ x `_ e `. %stem `( x `, p `)  `]  `]  %mc45)
@(GLUE-MEANING %mc44 %mc45).

think 	  V-S XLE (^PRED) = '%stem<(^SUBJ)(^COMP)>'
		  @(LLCLOSURE %mc44)
@(LLATOM %mc40 s::(^ COMP) t)
@(LLATOM %mc41 s::(^ SUBJ) e)
@(LLATOM %mc42 s::^ t)
@(LLIMP %mc43 %mc41 %mc42)
@(LLIMP %mc44 %mc40 %mc43)
@(CONCAT  `[  `/ p `_ t `.  `[  `/ x `_ e `. %stem `( x `, p `)  `]  `]  %mc45)
@(GLUE-MEANING %mc44 %mc45).

ensure 	  V-S XLE (^PRED) = '%stem<(^SUBJ)(^COMP)>'
		  @(LLCLOSURE %mc44)
@(LLATOM %mc40 s::(^ COMP) t)
@(LLATOM %mc41 s::(^ SUBJ) e)
@(LLATOM %mc42 s::^ t)
@(LLIMP %mc43 %mc41 %mc42)
@(LLIMP %mc44 %mc40 %mc43)
@(CONCAT  `[  `/ p `_ t `.  `[  `/ x `_ e `. %stem `( x `, p `)  `]  `]  %mc45)
@(GLUE-MEANING %mc44 %mc45).


convince  V-S XLE (^PRED) = '%stem<(^SUBJ)(^OBJ)(^XCOMP)>'
		  (^ XCOMP SUBJ) = (^OBJ). 

try 	  V-S XLE (^PRED) = '%stem<(^SUBJ)(^XCOMP)>'
		  (^ XCOMP SUBJ) = (^SUBJ).

"Intransitives"

appear 	  V-S XLE @(INTRANS %stem).

disappear V-S XLE @(INTRANS %stem).

laugh 	  V-S XLE @(INTRANS %stem).

meowed 	  V * @(INTRANS meow)
	      { @VPAST | @PASTP }
	      @(PROG -_)
	      @(PERF -_).
	       
	       
	       "ate V * @(OPT-TRANS eat) optionally transitive verbs"
	       "VPAST."
	       
	       "unnecesary entry -- have morphological analyzer now"
	       "eats V * @(OPT-TRANS eat)
	       @VPRES	       @S-AGR. "

sleep 	  V-S XLE * @(INTRANS sleep).

wait 	  V-S XLE { @(INTRANS wait) | 
		@(INTRANS-OBL wait) 
		"this is the non-semantic OBL wait on a customer use"
		(^ OBL PFORM) =c on
		(^ PSEM) =c nosem }.

"Optional transitives"

drinks 	  V-S XLE @(OPT-TRANS drink).

eat 	  V-S XLE @(OPT-TRANS %stem).

escape 	  V-S XLE @(OPT-TRANS %stem).

"Transitives" 

devour 	  V-S XLE @(TRANS devour).

hate 	  V-S XLE @(TRANS %stem).  "using the morphological analyzer"

implement V * @(TRANS see)
	      @VPRES
	      @BARE-AGR. 

love 	  V-S XLE @(TRANS %stem).

receive   V-S XLE @(TRANS %stem).

see 	  V-S XLE @(TRANS %stem).

"Ditransitives"

give 	  V-S XLE @(DITRANS give).

"Nouns"

cat 	  N * (^PRED) = 'cat'
	      (^ NTYPE) = count
	      @(LLCLOSURE %mc60)
@(LLATOM %mc58 (s::^ VAR) e)
@(LLATOM %mc59 (s::^ RESTR) t)
@(LLIMP %mc60 %mc58 %mc59)
@(CONCAT  `[  `/ x `_ e `. %stem `( x `)  `]  %mc61)
@(GLUE-MEANING %mc60 %mc61).

"adjectives --- should really be done via the morphology, like the nouns"

small 	  A * @(PRED small). 

smart 	  A * @(PRED smart). 

grey 	  A * @(PRED grey).

big 	  A * @(PRED big)
	      @(LLCLOSURE %mc68)
@(LLATOM %mc62 (s::(ADJUNCT $ ^) VAR) e)
@(LLATOM %mc63 (s::(ADJUNCT $ ^) RESTR) t)
@(LLIMP %mc64 %mc62 %mc63)
@(LLATOM %mc65 (s::(ADJUNCT $ ^) VAR) e)
@(LLATOM %mc66 (s::(ADJUNCT $ ^) RESTR) t)
@(LLIMP %mc67 %mc65 %mc66)
@(LLIMP %mc68 %mc64 %mc67)
@(CONCAT  `[  `/ P `_  `< e `, t `>  `.  `[  `/ x `_ e `.  `( big `( x `)   `&  P `( x `)  `)  `]  `]  %mc69)
@(GLUE-MEANING %mc68 %mc69).

black 	  A * @(PRED black)
	      @(LLCLOSURE %mc76)
@(LLATOM %mc70 (s::(ADJUNCT $ ^) VAR) e)
@(LLATOM %mc71 (s::(ADJUNCT $ ^) RESTR) t)
@(LLIMP %mc72 %mc70 %mc71)
@(LLATOM %mc73 (s::(ADJUNCT $ ^) VAR) e)
@(LLATOM %mc74 (s::(ADJUNCT $ ^) RESTR) t)
@(LLIMP %mc75 %mc73 %mc74)
@(LLIMP %mc76 %mc72 %mc75)
@(CONCAT  `[  `/ P `_  `< e `, t `>  `.  `[  `/ x `_ e `.  `( black `( x `)   `&  P `( x `)  `)  `]  `]  %mc77)
@(GLUE-MEANING %mc76 %mc77).

scottish  A * @(PRED scottish)
	      @(LLCLOSURE %mc84)
@(LLATOM %mc78 (s::(ADJUNCT $ ^) VAR) e)
@(LLATOM %mc79 (s::(ADJUNCT $ ^) RESTR) t)
@(LLIMP %mc80 %mc78 %mc79)
@(LLATOM %mc81 (s::(ADJUNCT $ ^) VAR) e)
@(LLATOM %mc82 (s::(ADJUNCT $ ^) RESTR) t)
@(LLIMP %mc83 %mc81 %mc82)
@(LLIMP %mc84 %mc80 %mc83)
@(CONCAT  `[  `/ P `_  `< e `, t `>  `.  `[  `/ x `_ e `.  `( scottish `( x `)   `&  P `( x `)  `)  `]  `]  %mc85)
@(GLUE-MEANING %mc84 %mc85).

trustworthy A * @(PRED trustworthy)
		@(LLCLOSURE %mc92)
@(LLATOM %mc86 (s::(ADJUNCT $ ^) VAR) e)
@(LLATOM %mc87 (s::(ADJUNCT $ ^) RESTR) t)
@(LLIMP %mc88 %mc86 %mc87)
@(LLATOM %mc89 (s::(ADJUNCT $ ^) VAR) e)
@(LLATOM %mc90 (s::(ADJUNCT $ ^) RESTR) t)
@(LLIMP %mc91 %mc89 %mc90)
@(LLIMP %mc92 %mc88 %mc91)
@(CONCAT  `[  `/ P `_  `< e `, t `>  `.  `[  `/ x `_ e `.  `( trustworthy `( x `)   `&  P `( x `)  `)  `]  `]  %mc93)
@(GLUE-MEANING %mc92 %mc93).

alleged   A * @(PRED alleged)
	      @(LLCLOSURE %mc100)
@(LLATOM %mc94 (s::(ADJUNCT $ ^) VAR) e)
@(LLATOM %mc95 (s::(ADJUNCT $ ^) RESTR) t)
@(LLIMP %mc96 %mc94 %mc95)
@(LLATOM %mc97 (s::(ADJUNCT $ ^) VAR) e)
@(LLATOM %mc98 (s::(ADJUNCT $ ^) RESTR) t)
@(LLIMP %mc99 %mc97 %mc98)
@(LLIMP %mc100 %mc96 %mc99)
@(CONCAT  `[  `/ P `_  `< e `, t `>  `.  `[  `/ x `_ e `. alleged `( P `( x `)  `)  `]  `]  %mc101)
@(GLUE-MEANING %mc100 %mc101).

former 	  A * @(PRED former)
	      @(LLCLOSURE %mc108)
@(LLATOM %mc102 (s::(ADJUNCT $ ^) VAR) e)
@(LLATOM %mc103 (s::(ADJUNCT $ ^) RESTR) t)
@(LLIMP %mc104 %mc102 %mc103)
@(LLATOM %mc105 (s::(ADJUNCT $ ^) VAR) e)
@(LLATOM %mc106 (s::(ADJUNCT $ ^) RESTR) t)
@(LLIMP %mc107 %mc105 %mc106)
@(LLIMP %mc108 %mc104 %mc107)
@(CONCAT  `[  `/ P `_  `< e `, t `>  `.  `[  `/ x `_ e `. former `( P `( x `)  `)  `]  `]  %mc109)
@(GLUE-MEANING %mc108 %mc109).


"adverbs --- should really be done via the morphology, like the nouns"

quickly   ADV * @(PRED quickly). 

very 	  ADV * @(PRED very). 


"prepositions"

by 	  P * @(PREP by). 

to 	  P * @(PREP to); 
	  PARTinf * (^ VFORM) =c inf. 

on 	  P * @(PREP on). 

in 	  P * @(PREP in). 

with 	  P * @(PREP with). 


"auxiliaries"

was 	  AUX * @(TENSE past)
		{ (^ SUBJ PERS) = 1
                | (^ SUBJ PERS) = 3
                }
                (^ SUBJ NUM) = sg. 

"pronouns (not complete)"

I 	  PRON * @(PRON I 1 sg pers) 
		 @(CASE nom).

You	PRON * {@(PRON you 2 sg pers)
	       |@(PRON you 2 pl pers)}.

you	PRON * {@(PRON you 2 sg pers)
	       |@(PRON you 2 pl pers)}.

He 	  PRON * @(PRON he 3 sg pers)
		 @(CASE nom).

he 	  PRON * @(PRON he 3 sg pers)
		 @(CASE nom).

She 	  PRON * @(PRON she 3 sg pers)
		 @(CASE nom).

she 	  PRON * @(PRON she 3 sg pers)
		 @(CASE nom).

it	  PRON * @(PRON it 3 sg pers). 

We 	  PRON * @(PRON we 1 pl pers)
		 @(CASE nom).

we 	  PRON * @(PRON we 1 pl pers)
		 @(CASE nom).

They 	  PRON * @(PRON they 3 pl pers) 
		 @(CASE nom). 

they 	  PRON * @(PRON they 3 pl pers)
		 @(CASE nom). 

My 	  PRON * @(PRON my 1 sg poss). 

my 	  PRON * @(PRON my 1 sg poss).

Her 	  PRON * @(PRON her 3 sg poss).

her 	  PRON * @(PRON her 3 sg poss).

Him 	  PRON * @(PRON he 3 sg pers)
		 @(CASE acc).

him 	  PRON * @(PRON he 3 sg pers)
		 @(CASE acc).


"determiners"

the 	  D * (^DEF) = +
	      @(LLCLOSURE %mc114)
@(LLATOM %mc110 (s::^ VAR) e)
@(LLATOM %mc111 (s::^ RESTR) t)
@(LLIMP %mc112 %mc110 %mc111)
@(LLATOM %mc113 s::^ e)
@(LLIMP %mc114 %mc112 %mc113)
@(CONCAT  `[  `/ P `_  `< e `, t `>  `. Ix `_ e `[ P `( x `)  `]  `]  %mc115)
@(GLUE-MEANING %mc114 %mc115).

The 	  D * (^DEF) = +
	      @(LLCLOSURE %mc114)
@(LLATOM %mc110 (s::^ VAR) e)
@(LLATOM %mc111 (s::^ RESTR) t)
@(LLIMP %mc112 %mc110 %mc111)
@(LLATOM %mc113 s::^ e)
@(LLIMP %mc114 %mc112 %mc113)
@(CONCAT  `[  `/ P `_  `< e `, t `>  `. Ix `_ e `[ P `( x `)  `]  `]  %mc115)
@(GLUE-MEANING %mc114 %mc115).


a 	  D * @(SPEC-DET-PRED a)
	      (^ DEF) = - "this indefinite only marks singulars" 
	      (^ NUM) = sg
	      @(QUANT-SCOPE ^ %q) 
	      @(LLCLOSURE %mc130)
@(LLATOM %mc122 (s::^ VAR) e)
@(LLATOM %mc123 (s::^ RESTR) t)
@(LLIMP %mc124 %mc122 %mc123)
@(LLATOM %mc125 s::^ e)
@(LLATOM %mc126 %q t)
@(LLIMP %mc127 %mc125 %mc126)
@(LLATOM %mc128 %q t)
@(LLIMP %mc129 %mc127 %mc128)
@(LLIMP %mc130 %mc124 %mc129)
@(CONCAT  `[  `/ P `_  `< e `, t `>  `.  `[  `/ Q `_  `< e `, t `>  `. Ex `_ e `[ P `( x `)   `&  Q `( x `)  `]  `]  `]  %mc131)
@(GLUE-MEANING %mc130 %mc131).

an 	  D * @(SPEC-DET-PRED a)
	      (^ DEF) = - "this indefinite only marks singulars" 
	      (^ NUM) = sg
	      @(QUANT-SCOPE ^ %q) 
	      @(LLCLOSURE %mc130)
@(LLATOM %mc122 (s::^ VAR) e)
@(LLATOM %mc123 (s::^ RESTR) t)
@(LLIMP %mc124 %mc122 %mc123)
@(LLATOM %mc125 s::^ e)
@(LLATOM %mc126 %q t)
@(LLIMP %mc127 %mc125 %mc126)
@(LLATOM %mc128 %q t)
@(LLIMP %mc129 %mc127 %mc128)
@(LLIMP %mc130 %mc124 %mc129)
@(CONCAT  `[  `/ P `_  `< e `, t `>  `.  `[  `/ Q `_  `< e `, t `>  `. Ex `_ e `[ P `( x `)   `&  Q `( x `)  `]  `]  `]  %mc131)
@(GLUE-MEANING %mc130 %mc131).
	
A 	  D * @(SPEC-DET-PRED a)
	      (^ DEF) = - "this indefinite only marks singulars" 
	      (^ NUM) = sg
	      @(QUANT-SCOPE ^ %q) 
	      @(LLCLOSURE %mc130)
@(LLATOM %mc122 (s::^ VAR) e)
@(LLATOM %mc123 (s::^ RESTR) t)
@(LLIMP %mc124 %mc122 %mc123)
@(LLATOM %mc125 s::^ e)
@(LLATOM %mc126 %q t)
@(LLIMP %mc127 %mc125 %mc126)
@(LLATOM %mc128 %q t)
@(LLIMP %mc129 %mc127 %mc128)
@(LLIMP %mc130 %mc124 %mc129)
@(CONCAT  `[  `/ P `_  `< e `, t `>  `.  `[  `/ Q `_  `< e `, t `>  `. Ex `_ e `[ P `( x `)   `&  Q `( x `)  `]  `]  `]  %mc131)
@(GLUE-MEANING %mc130 %mc131).

An 	  D * @(SPEC-DET-PRED a)
	      (^ DEF) = - "this indefinite only marks singulars" 
	      (^ NUM) = sg
	      @(QUANT-SCOPE ^ %q) 
	      @(LLCLOSURE %mc130)
@(LLATOM %mc122 (s::^ VAR) e)
@(LLATOM %mc123 (s::^ RESTR) t)
@(LLIMP %mc124 %mc122 %mc123)
@(LLATOM %mc125 s::^ e)
@(LLATOM %mc126 %q t)
@(LLIMP %mc127 %mc125 %mc126)
@(LLATOM %mc128 %q t)
@(LLIMP %mc129 %mc127 %mc128)
@(LLIMP %mc130 %mc124 %mc129)
@(CONCAT  `[  `/ P `_  `< e `, t `>  `.  `[  `/ Q `_  `< e `, t `>  `. Ex `_ e `[ P `( x `)   `&  Q `( x `)  `]  `]  `]  %mc131)
@(GLUE-MEANING %mc130 %mc131).

every 	  D * @(SPEC-DET-PRED every)
	      (^ DEF) = - "this indefinite only marks singulars" 
	      (^ NUM) = sg
	      @(QUANT-SCOPE ^ %q) 
	      @(LLCLOSURE %mc170)
@(LLATOM %mc162 (s::^ VAR) e)
@(LLATOM %mc163 (s::^ RESTR) t)
@(LLIMP %mc164 %mc162 %mc163)
@(LLATOM %mc165 s::^ e)
@(LLATOM %mc166 %q t)
@(LLIMP %mc167 %mc165 %mc166)
@(LLATOM %mc168 %q t)
@(LLIMP %mc169 %mc167 %mc168)
@(LLIMP %mc170 %mc164 %mc169)
@(CONCAT  `[  `/ P `_  `< e `, t `>  `.  `[  `/ Q `_  `< e `, t `>  `. Ax `_ e `[ P `( x `)   `-  `>  Q `( x `)  `]  `]  `]  %mc171)
@(GLUE-MEANING %mc170 %mc171).

Every 	  D * @(SPEC-DET-PRED every)
	      (^ DEF) = - "this indefinite only marks singulars" 
	      (^ NUM) = sg
	      @(QUANT-SCOPE ^ %q) 
	      @(LLCLOSURE %mc170)
@(LLATOM %mc162 (s::^ VAR) e)
@(LLATOM %mc163 (s::^ RESTR) t)
@(LLIMP %mc164 %mc162 %mc163)
@(LLATOM %mc165 s::^ e)
@(LLATOM %mc166 %q t)
@(LLIMP %mc167 %mc165 %mc166)
@(LLATOM %mc168 %q t)
@(LLIMP %mc169 %mc167 %mc168)
@(LLIMP %mc170 %mc164 %mc169)
@(CONCAT  `[  `/ P `_  `< e `, t `>  `.  `[  `/ Q `_  `< e `, t `>  `. Ax `_ e `[ P `( x `)   `-  `>  Q `( x `)  `]  `]  `]  %mc171)
@(GLUE-MEANING %mc170 %mc171).


"complementizers"

that  C * (^COMP-FORM) = that. 


"conjunctions"

and 	  CONJ * @(COORD-FORM %stem);
	  CONJnp * @(COORD-FORM %stem) @(NUM pl).


"punctuation, now with some functional information"

. 	  PERIOD * (^ STMT-TYPE) = declarative. 

, 	  COMMA * . 

! 	  EXCL * (^ STMT-TYPE) = exclamation. 


----

MORPH   ENGLISH   RULES (1.0)

"sample rule"

"this deals with verbs.  
The sublexcial items are the POS assigned to the various tags in morph-lex.lfg" 

   V --> V-S_BASE "verb stem, e.g. run"
 	 V-POS_BASE "suffix saying that this is a verb: +Verb"
 	 {TNS_BASE "tense suffix, e.g. +Pres" 
 	   PERS_BASE "person suffix, e.g. +3sg"
 	 | ASP_BASE}.   "aspectual information"

  
   N --> N-S_BASE "noun stem"
 	 N-POS_BASE
 	 (N-NAME_BASE) "allow for +Giv or +Place in names"
 	 (N-GEND_BASE) "allow for gender information" 
 	 N-NUM_BASE.

   A --> ADJ-S_BASE
 	 ADJ-POS_BASE.
	 
   ADV --> ADV-S_BASE
 	  ADV-POS_BASE.

----
MORPH   ENGLISH   LEXICON (1.0)

"this guesses words that are unknown to your lexicon
 to be either adjectives or nouns"
-unknown  ADJ-S XLE @(PRED %stem);
	  ADV-S XLE @(PRED %stem);
	  N-S XLE @(PRED %stem)
		  { (^ NTYPE) = count
		    @(LLCLOSURE %mc184)
@(LLATOM %mc182 (s::^ VAR) e)
@(LLATOM %mc183 (s::^ RESTR) t)
@(LLIMP %mc184 %mc182 %mc183)
@(CONCAT  `[  `/ x `_ e `. %stem `( x `)  `]  %mc185)
@(GLUE-MEANING %mc184 %mc185)		  |
		  (^ NTYPE) = name
		  @(LLCLOSURE %mc186)
@(LLATOM %mc186 s::^ e)
@(CONCAT %stem %mc187)
@(GLUE-MEANING %mc186 %mc187)		  }. 

"lexical entries for tags coming out of the morphological analyzer" 

+Verb 	  V-POS XLE .

+Pres 	  TNS XLE @VPRES.

+3sg 	  PERS XLE @S-AGR
		   @(PROG -_)
		   @(PERF -_).

+PastBoth TNS XLE "past tense or past particle"
		  { @VPAST | @PASTP }
		  @(PROG -_)
		  @(PERF -_). 

+PastTense TNS XLE "past tense"
		   @VPAST
		   @(PROG -_)
		   @(PERF -_).

+PastPerf TNS XLE @PASTP.

+123SP 	  PERS XLE .

+Non3sg   PERS XLE @BARE-AGR.

+Prog 	  ASP XLE @VPROG.  

+Noun 	  N-POS XLE @(NPOS count) "3rd person count noun"
		    @(PERS 3).
		       
+Prop 	  N-POS XLE @(NPOS name) "3rd person name"
		    @(PERS 3).   

+Giv 	  N-NAME XLE .   "for given names, no info associated so far"

+Pl 	  N-NUM XLE (^ NUM) = pl. 

+Sg 	  N-NUM XLE (^ NUM) = sg. 

+Fem 	  N-GEND XLE (^GEND) = fem. 

+Masc 	  N-GEND XLE (^GEND) = masc.

+Adj 	  ADJ-POS XLE .

+Adv 	  ADV-POS XLE .


----

GLUE   BASIC   TEMPLATES (1.0)

   LLIMP(N L R) = (N ANT) = L
	  (N CONS) = R.
	      
   LLATOM(N L T) = (N RESOURCE) = L
	  (N TYPE) = T.

   LLCLOSURE(G) = G $ (g::* GLUE).

   GLUE-MEANING(TypedRES M) = 
	  (TypedRES MEANING) = M.

   NOSCOPE(G) = (G NOSCOPE) = +.  

   QUANT-SCOPE(UP NAME) =
	  NAME = s::({SUBJ | OBJ | OBJ2 | COMP | OBL-TO | OBL-AG | OBL}+ ^).

----

MULTISTAGE   BASIC   TEMPLATES (1.0)

   EQUAL-GLUE(DOWN UP) =
	  UP = %up
	  DOWN = %down
	  %down $ (%up ELEMENTS).

   DOMINATES-GLUE(DOWN UP N) =
	  @(CONCAT DAUGHTER N %daughter)
	  UP = %up
	  DOWN = %down
	  %down $ (%up %daughter ELEMENTS).



----

