GLUE   BASIC   TEMPLATES (1.0)

   LLIMP(N L R) = (N ANT) = L
	  (N CONS) = R.

   LLATOM(N L T) = (N RESOURCE) = L
	  (N TYPE) = T.

   LLCLOSURE(G) = G $ (g::* GLUE).

   GLUE-MEANING(R M) =
	  (R MEANING) = M.

  NOSCOPE(G) = (G NOSCOPE) = +.

   NAME-SCOPE(UP NAME) =
   %name = ({SUBJ | OBJ | OBJ2 | XCOMP | OBL-TO | OBL-AG | OBL | ADJUNCT| PREDLINK}+ ^)
   (%name FIN) =c +
   NAME  = (s::%name SIT)
   (s::^ QUANT-SCOPE) = NAME.

     QUANT-SCOPE(UP NAME) =
  	  %name = ({SUBJ | OBJ | OBJ2 | XCOMP | OBL-TO | OBL-AG | OBL-COMP | OBL | ADJUNCT | PREDLINK}+ ^) "PREDLINK added so determiners are compatible eg. 'Mary is a dog'"
  	  (s::%name EV TYPE) =c eventuality
  	  NAME = (s::%name SIT)
  	  (s::^ QUANT-SCOPE) = NAME.

" Why does the below not work?
   QUANT-SCOPE(UP NAME) =
	  NAME = s::({SUBJ | OBJ | OBJ2 | XCOMP | OBL-TO | OBL-AG | OBL | ADJUNCT | PREDLINK}+ ^)
	  (NAME EV TYPE) =c eventuality
	  (s::^ QUANT-SCOPE) = (NAME SIT).
	  "

   ATTITUDE = (s::^ SIT) = %s
   	      (s::^ EV TYPE) = eventuality
	  {
	    (^ ROOT)
	    @TENSE-CLOSURE
	   |
	    ~[(^ ROOT)]
	    }.

   EVENT(REL) =
	  (s::^ EV TYPE) = eventuality
	  (s::^ SIT) = %s
	  :$ lam(V,drs([],[pred(REL,V)])) : ((s::^ EV)_v -o (s::^ EV)_t),
	  :$ lam(V,lam(S,merge(drs([E],[rel(partOf,E,S)]),app(V,E)))) : (((s::^ EV)_v -o (s::^ EV)_t) -o (%s_s -o %s_t)),
	  {
	    (^ ROOT)
	    @TENSE-CLOSURE
	   |
	    ~[(^ ROOT)]}.

   PREP-SEM(P) =
             {
	     %scope = (s::(ADJUNCT ^) EV)
	     (%scope TYPE) =c eventuality
	    :$ lam(U,lam(V,lam(E,merge(drs([],[]),merge(app(U,E),app(V,E)))))) :
	    ((%scope_v -o s::^_t) -o ((%scope_v -o %scope_t) -o (%scope_v -o %scope_t))),
	    :$ lam(Y,lam(X,drs([],[rel(P,X,Y)]))) : (s::(^OBJ)_e -o (%scope_v -o s::^_t)),
	    |
	    %scope = s::(ADJUNCT ^)
	    (%scope TYPE) =c entity
	    :$ lam(U,lam(V,lam(E,merge(drs([],[]),merge(app(U,E),app(V,E)))))) :
	    ((s::(ADJUNCT ^)_e -o s::^_t) -o ((s::(ADJUNCT ^)_e -o %scope_t) -o (s::(ADJUNCT ^)_e -o %scope_t))) || noscope,
	    :$ lam(Y,lam(X,drs([],[rel(P,X,Y)]))) : (s::(^OBJ)_e -o (s::(ADJUNCT ^)_e -o s::^_t)),
	     }.

 TENSE-CLOSURE = %tense = (s::^ TEMP-REF EVAL)
 :$ lam(P,merge(drs([T],[eq(T,now)]),app(P,T))) : ((%tense_s -o %tense_t) -o s::^_t).

   "Templates for argument structure. Need to be separate to avoid trouble with local names"
   ARG1(ARG) =
       :$ lam(V,lam(X,lam(E,merge(app(V,E),drs([],[rel(arg1,E,X)]))))) :
       (((s::^ EV)_v -o (s::^ EV)_t) -o (s::ARG_e -o ((s::^ EV)_v -o (s::^ EV)_t))) || noscope.

   ARG2(ARG) =
       :$ lam(V,lam(X,lam(E,merge(app(V,E),drs([],[rel(arg2,E,X)]))))) :
       (((s::^ EV)_v -o (s::^ EV)_t) -o (s::ARG_e -o ((s::^ EV)_v -o (s::^ EV)_t))) || noscope.

   ARG3(ARG) =
       :$ lam(V,lam(X,lam(E,merge(app(V,E),drs([],[rel(arg3,E,X)]))))) :
       (((s::^ EV)_v -o (s::^ EV)_t) -o (s::ARG_e -o ((s::^ EV)_v -o (s::^ EV)_t))) || noscope.

----
